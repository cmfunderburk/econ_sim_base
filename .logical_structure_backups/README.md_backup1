# Economic Simulation Project

The goal of this project is to create a modular simulation of an economy using agent-based modeling with rigorous economic theory foundations. This simulation implements rational agents ("Homo Economicus") trading goods on a spatial grid with proper equilibrium pricing based on marginal utility calculations.

## Project Vision

This project aims to build a comprehensive economic modeling platform step-by-step from economic first principles, starting with a pure exchange economy and extending to include production, money, institutions, and behavioral economics.

## Architecture Overview

- **Performance Target**: Scalable to 100+ agents with vectorized numpy operations
- **Extensible Framework**: Plugin system for utility functions, market mechanisms, and economic institutions
- **Theoretical Grounding**: All components connect to established economic theory
- **Real-time Visualization**: Pygame-based visualization of agent movement and trading

## Core Components

The basic elements are:

1. The Agents ("Homo Economicus")
    i. Each agent has a preference relation over all possible subsets of goods in the economy. A choice function generated by this preference relation is complete, transitive, and non-empty for all subsets of the choice set. This may be represented by a utility function
    ii. Each agent has an inventory, initialized to zero of each item.
    iii. Each agent has a home, located on a random square on an NxN grid that is not part of the Marketplace. Each agent starts at their home.
    iv. Each agent has a unique numerical ID, starting at 1.
    v. Each agent can trade with another agent if they are on the same square. They can also trade directly to the marketplace when they are inside the marketplace grid. They can trade only items currently in their inventory.
    vi. **Trading Rules**: Agents trade if and only if both parties improve utility. Equilibrium prices are calculated from marginal utility ratios at equilibrium allocation, reflecting both initial endowments and agent preferences through utility maximization.

2. Agent's Home
    i. Each agent's home is initialized with an inventory described in section 5.
    ii. While in their home, agents can freely transfer items between their own inventory and their home inventory.

3. Marketplace
    i. The marketplace is an area in the center-most 2x2 portion of the NxN grid.
    ii. The marketplace can purchase items from agents for the equilibrium price. It will store these items in its inventory so that agents may purchase them later.

4. NxN Grid
    i. The length and width of the grid should each be 3 times the value of the number of agents.
    ii. Agents can move a single square in any direction per turn.

5. Goods
    i. There twice as many types of goods in the economy as their are agents.
    ii. The total quantity of each good is equal to 3 times the number of agents.
    iii. The total for each good is randomly divided up at initialization to each agent's home.

6. **Preference Generator & Utility Functions**
    i. **Extensible Framework**: Each agent has different utility function parameters or functional forms entirely (Cobb-Douglas, CES, quasi-linear, etc.)
        a. Example: If 2 agents have Cobb-Douglas utility functions, the exponents differ in value
        b. Better: One agent with Cobb-Douglas, one with quasi-linear, one with CES, etc.
    ii. **Initial Implementation**: All agents start with Cobb-Douglas utility functions with randomized weights and epsilon correction for zero-valued quantities
    iii. **Future Extensions**: Plugin system for additional utility functions from economic literature

## Simulation Flow

Agents begin at their homes with randomly distributed initial endowments (3A quantity of 2A goods). The simulation proceeds as follows:

1. **Initialization**: Agents retrieve endowments from home inventories
2. **Movement Phase**: Agents travel toward the marketplace (single square per turn)
3. **Agent-to-Agent Trading**: When agents occupy the same square and have mutually beneficial opportunities, they trade at equilibrium prices
4. **Marketplace Phase**: 
   - **Selling**: Agents sell excess items to marketplace at equilibrium prices
   - **Buying**: Agents purchase items from marketplace to achieve optimal bundles
5. **Analysis**: Final statistics comparing initial vs. ending inventories and utilities

## Technical Implementation

### Dependencies
- **Core**: numpy, pygame, scipy
- **Performance**: numba (optional JIT compilation)
- **Development**: pytest, black, mypy, flake8
- **Analysis**: line-profiler, memory-profiler

### Key Design Principles
- **Vectorized Operations**: All agent properties and calculations use numpy arrays for 100+ agent performance
- **Spatial Optimization**: Grid-based spatial hashing for efficient neighbor detection
- **Economic Validation**: Conservation laws, Pareto efficiency verification, theoretical consistency
- **Modular Extensions**: Framework supports adding institutions, behavioral economics, macroeconomic layers

### Development Setup
```bash
# Create and activate virtual environment
python3 -m venv venv
source venv/bin/activate

# Install dependencies
pip install -r requirements.txt

# Run tests
pytest

# Format code
black src/
```

## Future Extensions
- **Market Mechanisms**: Auctions, bargaining, price discovery beyond equilibrium
- **Institutions**: Contracts, property rights, governance structures  
- **Behavioral Economics**: Bounded rationality, learning, social preferences
- **Macroeconomics**: Money, credit, production functions
- **Policy Analysis**: Framework for testing economic hypotheses and interventions

Final statistics on initial vs ending inventory, initial vs ending utility, and items sold/purchased for each agent are printed to the console, with real-time visualization via pygame.